
Overview
--------

This program reads a puzzle from the input (console / file) 
and tries to solve the puzzle with minimum choices to make.

The solution uses several important inputs from the user.
- the first line of input must have 3 integers that specifies number of columns, rows
  in the puzzle and total number of words to be solved (n).
- the next n set of lines should have 3 integers (containing start index row,column 
  and total length of the word) and 1 character (h/v - horizontal/vertical).
- the next n set of lines should have words that is to be used in puzzle.


Each of the line  have their own value to process and each of their outputs is driven 
by the content of a input values.

To load a puzzle to the class:
  - read each line from the input stream.
  - process the first input line to set row and column for 2-d array 
    and last integer determines total number of words(i.e., n) to be solved.
  - process next n set of input lines as each specifies start index [row][column] of each word in the puzzle. 
    assign these indexes to an arrayList wordIndexMap with there orientation prefixed as h-/v-.
  - process next n set of input lines as words that are to be solved in the puzzle.
  - assign these words to a queue of words having same length. Use HashMap to store 
    length of words as key, and corresponding words in the queue as value.

Files
-----
  - FillInPuzzle.java  -- main for the program that solves the puzzle for the given set of words.


Data structures and their relations to each other
-------------------------------------------------

The program solves puzzle for the set of words, tries to match words with the
indexes given as input. 

  wordQueue               -- stores queue of words with common length in HashMap.
							 length of word as key and queue of words as value. 
  pathVisitedAfterChoices -- stores the indexes that are filled in the puzzle
  wordIndexMap            -- stores all the indexes that is in the puzzle.
  visitedWords            -- stores track of all filled words in the puzzle
  wordPuzzle              -- to store word puzzle in 2 dimensional array.
  choice                  -- to check number of choice the puzzle makes while placing words.


Assumptions
-----------

  - There are no duplicate words.
  - There are no duplicate input indexes in loading the puzzle.
  - Two words cannot have same indexes in the puzzle.

Choices
-------

  - I will consider making a choice only if the given word is not of unique length 
    and the word does not have one or more characters already in the index. Otherwise,
	I will directly add the word to the respective index matched.
	
Key algorithms and design elements
----------------------------------

The program processes the input line one line at a time.  In the
output, it prints the solved puzzle to the writer.

The program consumes all inputs with blank spaces at the beginning and ending of the line.
By default all input line is considered as String so trailing whitespace in the line is 
removed using trim method of string.

Given the number of columns and rows from the line one, 2 dimensional string is initialized.
While loading the puzzle, the indexes of each word their length and orientation is stored to 
a String arrayList. Words with same length are stores in queue and assigned to a HashMap having 
length as key and value as queue.


Solving the puzzle follows the given algorithm,
	- check if there are words with unique length. This can be done by picking a key from 
	  hashmap having it value(queue) with size 1.
	- search for indexes having length same as word length and fill these words first.
	- look for words having maximum length from the given words by checking highest key from the HashMap.
	- From that hashmap value, remove the first word from value the (Queue), check if the indexes having same length.
	- Look for occurence of characters in the given index series if already found. 
	- check if the word has same characters at the same index if yes, add word to the empty indexs.
    - else, add word to another index that has empty characters. By doing so number of choice the puzzle makes is reduced.
    - check if all the words are filled to the puzzle, if not again search for indexes having next maximum length.
    - repeat this until no words are left unfilled to the puzzle.

Choices of puzzling:
	- I have considered a choice only if the word has 2 similar lengthed indexs and word has to choose one among them.


Limitations
-----------

The current design implementation is limited to having words starting from left to right
and top to bottom.
The progam cannot take empty space as input to any line while loading the puzzle.


Sample input Testcase:

1st input set
7 5 6
0 0 5 h 
1 2 5 h 
1 4 5 v 
4 3 4 v 
2 3 3 h
4 0 3 h
bash
array
frail
plush
cab
hat


o/p:
 ,f, , , , , ,
 ,r,c,a,b, , ,
 ,a,r,r,a,y, ,
 ,i, , ,s, , ,
p,l,u,s,h,a,t,


//2nd input set
7 5 7
0 0 5 h
3 2 3 v
1 3 4 v
1 2 5 h
5 4 3 v
6 4 2 v
0 4 7 h  
reverse
data
see
et
apple
pol
vault

o/p:
r,e,v,e,r,s,e,
 ,d, , , ,e,t,
 ,a,p,p,l,e, ,
 ,t, ,o, , , ,
v,a,u,l,t, , ,

//3rd input set
6 5 4 
0 0 5 h 
1 2 5 h 
1 4 5 v 
4 3 4 v 
bash 
array 
frail 
plush 

o/p:
 ,f, , , , ,
 ,r, , ,b, ,
 ,a,r,r,a,y,
 ,i, , ,s, ,
p,l,u,s,h, ,


4th input:
12 7 9
0 0 12 h
1 3 4 v
2 2 3 v
8 3 4 v
5 2 7 h
0 3 6 h
3 6 4 v
7 6 2 v
3 5 7 h
algebra
orange
taen
dria
tb
applecinamon
rdop
aep
storage

o/p:
 , , ,t, , , ,t, , , , ,
 , , ,a,l,g,e,b,r,a, , ,
 , , ,e, , , , , , , , ,
o,r,a,n,g,e, , ,d, , , ,
 ,d,a, , ,s,t,o,r,a,g,e,
 ,o,e, , , , , ,i, , , ,
a,p,p,l,e,c,i,n,a,m,o,n,

